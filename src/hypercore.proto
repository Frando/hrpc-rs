syntax = "proto2";

package schema;

message Void {}

// General Structs
message Peer {
  required bytes remotePublicKey = 1;
  required string remoteAddress = 2;
  required string type = 3;
}

// Corestore Methods

message OpenRequest {
  required uint32 id = 1;
  optional bytes key = 2;
  optional string name = 3;
  optional bool weak = 4;
}

message OpenResponse {
  required bytes key = 2;
  required uint64 length = 3;
  required uint64 byteLength = 4;
  required bool writable = 5;
  repeated Peer peers = 6;
}

// Corestore Events

message FeedEvent {
  required bytes key = 1;
}

// Networking Methods

message NetworkConfiguration {
  required bytes discoveryKey = 1;
  optional bool announce = 2;
  optional bool lookup = 3;
  optional bool remember = 4;
}

message ConfigureNetworkRequest {
  required NetworkConfiguration configuration = 1;
  optional bool flush = 2;
  optional bytes copyFrom = 3;
  optional bool overwrite = 4 [default = true];
}

message GetNetworkConfigurationRequest {
  required bytes discoveryKey = 1;
}

message GetNetworkConfigurationResponse {
  optional NetworkConfiguration configuration = 1;
}

message GetAllNetworkConfigurationsResponse {
  repeated NetworkConfiguration configurations = 1;
}

message ListPeersResponse {
  repeated Peer peers = 1;
}

// Hypercore Methods

message CloseRequest {
  required uint32 id = 1;
}

message GetRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
  required uint64 resourceId = 3;
  optional bool wait = 4 [default = true];
  optional bool ifAvailable = 5;
  optional uint64 onWaitId = 6;
}
message GetResponse {
  optional bytes block = 1;
}

message AppendRequest {
  required uint32 id = 1;
  repeated bytes blocks = 2;
}
message AppendResponse {
  required uint64 length = 1;
  required uint64 byteLength = 2;
  required uint64 seq = 3;
}

message UpdateRequest {
  required uint32 id = 1;
  optional uint64 minLength = 2;
  optional bool ifAvailable = 3;
  optional bool hash = 4 [default = true];
}

message SeekRequest {
  required uint32 id = 1;
  required uint64 byteOffset = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  optional bool wait = 5 [default = true];
  optional bool ifAvailable = 6;
}
message SeekResponse {
  required uint64 seq = 1;
  required uint64 blockOffset = 2;
}

message HasRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
}
message HasResponse {
  required bool has = 1;
}

message CancelRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message DownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  repeated uint64 blocks = 5;
  optional bool linear = 6;
}

message DownloadedRequest {
  required uint64 id = 1;
  optional uint64 start = 2;
  optional uint64 end = 3;
}

message DownloadedResponse {
  required uint64 bytes = 1;
}

message UndownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

message LockRequest {
  required uint64 id = 1;
}

message RegisterExtensionRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  required string name = 3;
}

message ExtensionMessage {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional bytes remotePublicKey = 3;
  required bytes data = 4;
}

// Hypercore Events

message AppendEvent {
  required uint64 id = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
}

message PeerEvent {
  required uint64 id = 1;
  required Peer peer = 2;
}

message CloseEvent {
  required uint64 id = 1;
}

message WaitEvent {
  required uint64 id = 1;
  required uint64 onWaitId = 2;
}

message PluginRequest {
  required string name = 1;
  optional bytes value = 2;
}

message PluginResponse {
  optional bytes value = 1;
}

message PluginStatus {
  optional bool running = 1;
}

// TODO: Before official release, tag these methods with explicit IDs.

service Plugins {
  rpc Start (PluginRequest) returns (PluginResponse);
  rpc Stop (PluginRequest) returns (Void);
  rpc Status (PluginRequest) returns (PluginStatus);
}

service Corestore {
   // Methods
  rpc Open (OpenRequest) returns (OpenResponse);

  // Events
  rpc OnFeed (FeedEvent) returns (Void);
}

service Hypercore {
   // Methods
  rpc Get (GetRequest) returns (GetResponse);
  rpc Append (AppendRequest) returns (AppendResponse);
  rpc Update (UpdateRequest) returns (Void);
  rpc Seek (SeekRequest) returns (SeekResponse);
  rpc Has (HasRequest) returns (HasResponse);
  rpc Cancel (CancelRequest) returns (Void);
  rpc Download (DownloadRequest) returns (Void);
  rpc Downloaded (DownloadedRequest) returns (DownloadedResponse);
  rpc Undownload (UndownloadRequest) returns (Void);
  rpc Close (CloseRequest) returns (Void);
  rpc RegisterExtension (RegisterExtensionRequest) returns (Void);
  rpc SendExtension (ExtensionMessage) returns (Void);

  rpc AcquireLock (LockRequest) returns (Void);
  rpc ReleaseLock (LockRequest) returns (Void);

  // Events
  rpc OnAppend (AppendEvent) returns (Void);
  rpc OnClose (CloseEvent) returns (Void);
  rpc OnPeerOpen (PeerEvent) returns (Void);
  rpc OnPeerRemove (PeerEvent) returns (Void);
  rpc OnExtension (ExtensionMessage) returns (Void);
  rpc OnWait (WaitEvent) returns (Void);
}

service Network {
   // Methods
  rpc Configure (ConfigureNetworkRequest) returns (Void);
  rpc GetConfiguration (GetNetworkConfigurationRequest) returns (GetNetworkConfigurationResponse);
  rpc GetAllConfigurations (Void) returns (GetAllNetworkConfigurationsResponse);
  rpc ListPeers (Void) returns (ListPeersResponse);

  // Events
  // rpc OnReady (NetworkReadyEvent) returns (Void);
  rpc OnPeerOpen (PeerEvent) returns (Void);
  rpc OnPeerRemove (PeerEvent) returns (Void);
}
